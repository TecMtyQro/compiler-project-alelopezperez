

Terminals which are not used:

   T_abstract
   T_alias
   T_align
   T_asm
   T_assert
   T_auto
   T_body
   T_break
   T_byte
   T_case
   T_cast
   T_catch
   T_cdouble
   T_cent
   T_cfloat
   T_char
   T_const
   T_continue
   T_creal
   T_dchar
   T_debug
   T_default
   T_delegate
   T_deprecated
   T_do
   T_enum
   T_export
   T_extern
   T_false
   T_final
   T_finally
   T_foreach
   T_foreach_reverse
   T_function
   T_goto
   T_idouble
   T_ifloat
   T_immutable
   T_import
   T_in
   T_inout
   T_interface
   T_invariant
   T_ireal
   T_is
   T_lazy
   T_long
   T_mixin
   T_module
   T_new
   T_nothrow
   T_out
   T_override
   T_package
   T_pragma
   T_pure
   T_real
   T_ref
   T_scope
   T_shared
   T_short
   T_static
   T_struc
   T_super
   T_switch
   T_synchronized
   T_template
   T_this
   T_throw
   T_true
   T_try
   T_typeid
   T_typeof
   T_ubyte
   T_ucent
   T_uint
   T_ulong
   T_union
   T_unittest
   T_ushort
   T_version
   T_wchar
   T_with
   T_andeq
   T_and
   T_oreq
   T_or
   T_GEQ
   T_NOTEQ
   T_LE
   END_OF_FILE



Grammar
rule 1    prog -> expressions_list
rule 2    prog -> block
rule 3    call_method -> ID T_dot ID param_list_use
rule 4    call_method -> ID T_dot ID
rule 5    func_declaration -> type ID param_list_type block
rule 6    func_use -> ID param_list_use
rule 7    param_list_use -> T_OPAREN id_list T_CPAREN
rule 8    param_list_use -> T_OPAREN T_CPAREN
rule 9    param_list_type -> T_OPAREN declaration_expression_list T_CPAREN
rule 10   param_list_type -> T_OPAREN T_CPAREN
rule 11   declaration_expression_list -> declaration_expression T_COMA declaration_expression_list
rule 12   declaration_expression_list -> declaration_expression
rule 13   id_list -> ID T_COMA id_list
rule 14   id_list -> ID
rule 15   block -> T_OCOR expressions_list T_CCOR
rule 16   expressions_list -> expression
rule 17   expressions_list -> expression expressions_list
rule 18   return_somehting -> T_return
rule 19   return_somehting -> T_return assign_expression
rule 20   return_somehting -> T_return literals
rule 21   expression -> assign_expression T_SEMICOLON
rule 22   expression -> ID T_SEMICOLON
rule 23   expression -> while_expression
rule 24   expression -> if_expression
rule 25   expression -> func_declaration
rule 26   expression -> func_use T_SEMICOLON
rule 27   expression -> for_expression
rule 28   expression -> class_declaration
rule 29   expression -> return_somehting T_SEMICOLON
rule 30   expression -> call_method T_SEMICOLON
rule 31   assign_expression -> type_assign_expression
rule 32   assign_expression -> declaration_expression
rule 33   assign_expression -> existing_assign_expression
rule 34   assign_expression -> inc_dec_declaration
rule 35   if_expression -> init_if
rule 36   if_expression -> init_if else_expression
rule 37   init_if -> T_if T_OPAREN condition T_CPAREN block
rule 38   init_if -> T_if T_OPAREN ID T_CPAREN block
rule 39   else_expression -> T_else T_if T_OPAREN condition T_CPAREN block else_expression
rule 40   else_expression -> T_else T_if T_OPAREN ID T_CPAREN block else_expression
rule 41   else_expression -> T_else block
rule 42   while_expression -> T_while T_OPAREN condition T_CPAREN block
rule 43   while_expression -> T_while T_OPAREN condition T_CPAREN
rule 44   for_expression -> T_for T_OPAREN type_assign_expression T_SEMICOLON condition T_SEMICOLON existing_assign_expression T_CPAREN block
rule 45   for_expression -> T_for T_OPAREN existing_assign_expression T_SEMICOLON condition T_SEMICOLON existing_assign_expression T_CPAREN block
rule 46   for_expression -> T_for T_OPAREN type_assign_expression T_SEMICOLON condition T_SEMICOLON inc_dec_declaration T_CPAREN block
rule 47   for_expression -> T_for T_OPAREN existing_assign_expression T_SEMICOLON condition T_SEMICOLON inc_dec_declaration T_CPAREN block
rule 48   for_expression -> T_for T_OPAREN type_assign_expression T_SEMICOLON condition T_SEMICOLON existing_assign_expression T_CPAREN
rule 49   for_expression -> T_for T_OPAREN existing_assign_expression T_SEMICOLON condition T_SEMICOLON existing_assign_expression T_CPAREN
rule 50   for_expression -> T_for T_OPAREN type_assign_expression T_SEMICOLON condition T_SEMICOLON inc_dec_declaration T_CPAREN
rule 51   for_expression -> T_for T_OPAREN existing_assign_expression T_SEMICOLON condition T_SEMICOLON inc_dec_declaration T_CPAREN
rule 52   condition -> operation_expression T_GR operation_expression
rule 53   condition -> operation_expression T_LT operation_expression
rule 54   condition -> operation_expression T_isEqual operation_expression
rule 55   condition -> operation_expression T_land operation_expression
rule 56   condition -> operation_expression T_lor operation_expression
rule 57   type_assign_expression -> type ID Equal_type operation_expression
rule 58   operation_expression -> literals T_plus operation_expression
rule 59   operation_expression -> literals T_minus operation_expression
rule 60   operation_expression -> literals T_multiply operation_expression
rule 61   operation_expression -> literals T_bslash operation_expression
rule 62   operation_expression -> literals
rule 63   literals -> NUM
rule 64   literals -> DEC
rule 65   literals -> ID
rule 66   literals -> T_minus NUM
rule 67   literals -> T_minus DEC
rule 68   literals -> T_minus ID
rule 69   literals -> T_LITCHAR
rule 70   literals -> T_LSTRING
rule 71   literals -> T_null
rule 72   declaration_expression -> type ID
rule 73   declaration_expression -> condition
rule 74   existing_assign_expression -> ID Equal_type operation_expression
rule 75   type -> T_int
rule 76   type -> T_double
rule 77   type -> T_float
rule 78   type -> T_bool
rule 79   type -> T_void
rule 80   Equal_type -> T_inceq
rule 81   Equal_type -> T_deceq
rule 82   Equal_type -> T_neq
rule 83   Equal_type -> T_multeq
rule 84   Equal_type -> T_EQUAL
rule 85   inc_dec_declaration -> ID inc_dec
rule 86   inc_dec_declaration -> inc_dec ID
rule 87   inc_dec -> T_inc
rule 88   inc_dec -> T_dec
rule 89   class_declaration -> T_class ID T_OCOR attributes_func T_CCOR
rule 90   access_mode -> T_public
rule 91   access_mode -> T_private
rule 92   access_mode -> T_protected
rule 93   attributes_func -> func_declaration
rule 94   attributes_func -> assign_expression T_SEMICOLON
rule 95   attributes_func -> func_declaration attributes_func
rule 96   attributes_func -> assign_expression T_SEMICOLON attributes_func
rule 97   attributes_func -> access_mode T_COLON attributes_func

Terminals, with rules where they appear

$ (-1)
error (256)
T_abstract (258)
T_alias (259)
T_align (260)
T_asm (261)
T_assert (262)
T_auto (263)
T_body (264)
T_bool (265) 78
T_break (266)
T_byte (267)
T_case (268)
T_cast (269)
T_catch (270)
T_cdouble (271)
T_cent (272)
T_cfloat (273)
T_char (274)
T_class (275) 89
T_const (276)
T_continue (277)
T_creal (278)
T_dchar (279)
T_debug (280)
T_default (281)
T_delegate (282)
T_deprecated (283)
T_do (284)
T_double (285) 76
T_else (286) 39 40 41
T_enum (287)
T_export (288)
T_extern (289)
T_false (290)
T_final (291)
T_finally (292)
T_float (293) 77
T_for (294) 44 45 46 47 48 49 50 51
T_foreach (295)
T_foreach_reverse (296)
T_function (297)
T_goto (298)
T_idouble (299)
T_if (300) 37 38 39 40
T_ifloat (301)
T_immutable (302)
T_import (303)
T_in (304)
T_inout (305)
T_int (306) 75
T_interface (307)
T_invariant (308)
T_ireal (309)
T_is (310)
T_lazy (311)
T_long (312)
T_mixin (313)
T_module (314)
T_new (315)
T_nothrow (316)
T_null (317) 71
T_out (318)
T_override (319)
T_package (320)
T_pragma (321)
T_private (322) 91
T_protected (323) 92
T_public (324) 90
T_pure (325)
T_real (326)
T_ref (327)
T_return (328) 18 19 20
T_scope (329)
T_shared (330)
T_short (331)
T_static (332)
T_struc (333)
T_super (334)
T_switch (335)
T_synchronized (336)
T_template (337)
T_this (338)
T_throw (339)
T_true (340)
T_try (341)
T_typeid (342)
T_typeof (343)
T_ubyte (344)
T_ucent (345)
T_uint (346)
T_ulong (347)
T_union (348)
T_unittest (349)
T_ushort (350)
T_version (351)
T_void (352) 79
T_wchar (353)
T_while (354) 42 43
T_with (355)
NUM (356) 63 66
T_neq (357) 82
T_bslash (358) 61
T_land (359) 55
T_andeq (360)
T_and (361)
T_lor (362) 56
T_oreq (363)
T_or (364)
T_dec (365) 88
T_deceq (366) 81
T_minus (367) 59 66 67 68
T_inc (368) 87
T_inceq (369) 80
T_plus (370) 58
T_GEQ (371)
T_GR (372) 52
T_NOTEQ (373)
T_OPAREN (374) 7 8 9 10 37 38 39 40 42 43 44 45 46 47 48 49 50 51
T_CPAREN (375) 7 8 9 10 37 38 39 40 42 43 44 45 46 47 48 49 50 51
T_OCOR (376) 15 89
T_CCOR (377) 15 89
T_SEMICOLON (378) 21 22 26 29 30 44 45 46 47 48 49 50 51 94 96
T_EQUAL (379) 84
T_multiply (380) 60
T_COMA (381) 11 13
T_LE (382)
T_isEqual (383) 54
DEC (384) 64 67
ID (385) 3 4 5 6 13 14 22 38 40 57 65 68 72 74 85 86 89
T_LT (386) 53
END_OF_FILE (387)
T_multeq (388) 83
T_LITCHAR (389) 69
T_dot (390) 3 4
T_COLON (391) 97
T_LSTRING (392) 70

Nonterminals, with rules where they appear

prog (138)
    on left: 1 2
call_method (139)
    on left: 3 4, on right: 30
func_declaration (140)
    on left: 5, on right: 25 93 95
func_use (141)
    on left: 6, on right: 26
param_list_use (142)
    on left: 7 8, on right: 3 6
param_list_type (143)
    on left: 9 10, on right: 5
declaration_expression_list (144)
    on left: 11 12, on right: 9 11
id_list (145)
    on left: 13 14, on right: 7 13
block (146)
    on left: 15, on right: 2 5 37 38 39 40 41 42 44 45 46 47
expressions_list (147)
    on left: 16 17, on right: 1 15 17
return_somehting (148)
    on left: 18 19 20, on right: 29
expression (149)
    on left: 21 22 23 24 25 26 27 28 29 30, on right: 16 17
assign_expression (150)
    on left: 31 32 33 34, on right: 19 21 94 96
if_expression (151)
    on left: 35 36, on right: 24
init_if (152)
    on left: 37 38, on right: 35 36
else_expression (153)
    on left: 39 40 41, on right: 36 39 40
while_expression (154)
    on left: 42 43, on right: 23
for_expression (155)
    on left: 44 45 46 47 48 49 50 51, on right: 27
condition (156)
    on left: 52 53 54 55 56, on right: 37 39 42 43 44 45 46 47 48 49
    50 51 73
type_assign_expression (157)
    on left: 57, on right: 31 44 46 48 50
operation_expression (158)
    on left: 58 59 60 61 62, on right: 52 53 54 55 56 57 58 59 60 61
    74
literals (159)
    on left: 63 64 65 66 67 68 69 70 71, on right: 20 58 59 60 61 62
declaration_expression (160)
    on left: 72 73, on right: 11 12 32
existing_assign_expression (161)
    on left: 74, on right: 33 44 45 47 48 49 51
type (162)
    on left: 75 76 77 78 79, on right: 5 57 72
Equal_type (163)
    on left: 80 81 82 83 84, on right: 57 74
inc_dec_declaration (164)
    on left: 85 86, on right: 34 46 47 50 51
inc_dec (165)
    on left: 87 88, on right: 85 86
class_declaration (166)
    on left: 89, on right: 28
access_mode (167)
    on left: 90 91 92, on right: 97
attributes_func (168)
    on left: 93 94 95 96 97, on right: 89 95 96 97


state 0

    T_bool	shift, and go to state 1
    T_class	shift, and go to state 2
    T_double	shift, and go to state 3
    T_float	shift, and go to state 4
    T_for	shift, and go to state 5
    T_if	shift, and go to state 6
    T_int	shift, and go to state 7
    T_null	shift, and go to state 8
    T_return	shift, and go to state 9
    T_void	shift, and go to state 10
    T_while	shift, and go to state 11
    NUM 	shift, and go to state 12
    T_dec	shift, and go to state 13
    T_minus	shift, and go to state 14
    T_inc	shift, and go to state 15
    T_OCOR	shift, and go to state 16
    DEC 	shift, and go to state 17
    ID  	shift, and go to state 18
    T_LITCHAR	shift, and go to state 19
    T_LSTRING	shift, and go to state 20

    prog	go to state 176
    call_method	go to state 21
    func_declaration	go to state 22
    func_use	go to state 23
    block	go to state 24
    expressions_list	go to state 25
    return_somehting	go to state 26
    expression	go to state 27
    assign_expression	go to state 28
    if_expression	go to state 29
    init_if	go to state 30
    while_expression	go to state 31
    for_expression	go to state 32
    condition	go to state 33
    type_assign_expression	go to state 34
    operation_expression	go to state 35
    literals	go to state 36
    declaration_expression	go to state 37
    existing_assign_expression	go to state 38
    type	go to state 39
    inc_dec_declaration	go to state 40
    inc_dec	go to state 41
    class_declaration	go to state 42



state 1

    type  ->  T_bool .   (rule 78)

    $default	reduce using rule 78 (type)



state 2

    class_declaration  ->  T_class . ID T_OCOR attributes_func T_CCOR   (rule 89)

    ID  	shift, and go to state 43



state 3

    type  ->  T_double .   (rule 76)

    $default	reduce using rule 76 (type)



state 4

    type  ->  T_float .   (rule 77)

    $default	reduce using rule 77 (type)



state 5

    for_expression  ->  T_for . T_OPAREN type_assign_expression T_SEMICOLON condition T_SEMICOLON existing_assign_expression T_CPAREN block   (rule 44)
    for_expression  ->  T_for . T_OPAREN existing_assign_expression T_SEMICOLON condition T_SEMICOLON existing_assign_expression T_CPAREN block   (rule 45)
    for_expression  ->  T_for . T_OPAREN type_assign_expression T_SEMICOLON condition T_SEMICOLON inc_dec_declaration T_CPAREN block   (rule 46)
    for_expression  ->  T_for . T_OPAREN existing_assign_expression T_SEMICOLON condition T_SEMICOLON inc_dec_declaration T_CPAREN block   (rule 47)
    for_expression  ->  T_for . T_OPAREN type_assign_expression T_SEMICOLON condition T_SEMICOLON existing_assign_expression T_CPAREN   (rule 48)
    for_expression  ->  T_for . T_OPAREN existing_assign_expression T_SEMICOLON condition T_SEMICOLON existing_assign_expression T_CPAREN   (rule 49)
    for_expression  ->  T_for . T_OPAREN type_assign_expression T_SEMICOLON condition T_SEMICOLON inc_dec_declaration T_CPAREN   (rule 50)
    for_expression  ->  T_for . T_OPAREN existing_assign_expression T_SEMICOLON condition T_SEMICOLON inc_dec_declaration T_CPAREN   (rule 51)

    T_OPAREN	shift, and go to state 44



state 6

    init_if  ->  T_if . T_OPAREN condition T_CPAREN block   (rule 37)
    init_if  ->  T_if . T_OPAREN ID T_CPAREN block   (rule 38)

    T_OPAREN	shift, and go to state 45



state 7

    type  ->  T_int .   (rule 75)

    $default	reduce using rule 75 (type)



state 8

    literals  ->  T_null .   (rule 71)

    $default	reduce using rule 71 (literals)



state 9

    return_somehting  ->  T_return .   (rule 18)
    return_somehting  ->  T_return . assign_expression   (rule 19)
    return_somehting  ->  T_return . literals   (rule 20)

    T_bool	shift, and go to state 1
    T_double	shift, and go to state 3
    T_float	shift, and go to state 4
    T_int	shift, and go to state 7
    T_null	shift, and go to state 8
    T_void	shift, and go to state 10
    NUM 	shift, and go to state 12
    T_dec	shift, and go to state 13
    T_minus	shift, and go to state 14
    T_inc	shift, and go to state 15
    DEC 	shift, and go to state 17
    ID  	shift, and go to state 46
    T_LITCHAR	shift, and go to state 19
    T_LSTRING	shift, and go to state 20

    $default	reduce using rule 18 (return_somehting)

    assign_expression	go to state 47
    condition	go to state 33
    type_assign_expression	go to state 34
    operation_expression	go to state 35
    literals	go to state 48
    declaration_expression	go to state 37
    existing_assign_expression	go to state 38
    type	go to state 49
    inc_dec_declaration	go to state 40
    inc_dec	go to state 41



state 10

    type  ->  T_void .   (rule 79)

    $default	reduce using rule 79 (type)



state 11

    while_expression  ->  T_while . T_OPAREN condition T_CPAREN block   (rule 42)
    while_expression  ->  T_while . T_OPAREN condition T_CPAREN   (rule 43)

    T_OPAREN	shift, and go to state 50



state 12

    literals  ->  NUM .   (rule 63)

    $default	reduce using rule 63 (literals)



state 13

    inc_dec  ->  T_dec .   (rule 88)

    $default	reduce using rule 88 (inc_dec)



state 14

    literals  ->  T_minus . NUM   (rule 66)
    literals  ->  T_minus . DEC   (rule 67)
    literals  ->  T_minus . ID   (rule 68)

    NUM 	shift, and go to state 51
    DEC 	shift, and go to state 52
    ID  	shift, and go to state 53



state 15

    inc_dec  ->  T_inc .   (rule 87)

    $default	reduce using rule 87 (inc_dec)



state 16

    block  ->  T_OCOR . expressions_list T_CCOR   (rule 15)

    T_bool	shift, and go to state 1
    T_class	shift, and go to state 2
    T_double	shift, and go to state 3
    T_float	shift, and go to state 4
    T_for	shift, and go to state 5
    T_if	shift, and go to state 6
    T_int	shift, and go to state 7
    T_null	shift, and go to state 8
    T_return	shift, and go to state 9
    T_void	shift, and go to state 10
    T_while	shift, and go to state 11
    NUM 	shift, and go to state 12
    T_dec	shift, and go to state 13
    T_minus	shift, and go to state 14
    T_inc	shift, and go to state 15
    DEC 	shift, and go to state 17
    ID  	shift, and go to state 18
    T_LITCHAR	shift, and go to state 19
    T_LSTRING	shift, and go to state 20

    call_method	go to state 21
    func_declaration	go to state 22
    func_use	go to state 23
    expressions_list	go to state 54
    return_somehting	go to state 26
    expression	go to state 27
    assign_expression	go to state 28
    if_expression	go to state 29
    init_if	go to state 30
    while_expression	go to state 31
    for_expression	go to state 32
    condition	go to state 33
    type_assign_expression	go to state 34
    operation_expression	go to state 35
    literals	go to state 36
    declaration_expression	go to state 37
    existing_assign_expression	go to state 38
    type	go to state 39
    inc_dec_declaration	go to state 40
    inc_dec	go to state 41
    class_declaration	go to state 42



state 17

    literals  ->  DEC .   (rule 64)

    $default	reduce using rule 64 (literals)



state 18

    call_method  ->  ID . T_dot ID param_list_use   (rule 3)
    call_method  ->  ID . T_dot ID   (rule 4)
    func_use  ->  ID . param_list_use   (rule 6)
    expression  ->  ID . T_SEMICOLON   (rule 22)
    literals  ->  ID .   (rule 65)
    existing_assign_expression  ->  ID . Equal_type operation_expression   (rule 74)
    inc_dec_declaration  ->  ID . inc_dec   (rule 85)

    T_neq	shift, and go to state 55
    T_dec	shift, and go to state 13
    T_deceq	shift, and go to state 56
    T_inc	shift, and go to state 15
    T_inceq	shift, and go to state 57
    T_OPAREN	shift, and go to state 58
    T_SEMICOLON	shift, and go to state 59
    T_EQUAL	shift, and go to state 60
    T_multeq	shift, and go to state 61
    T_dot	shift, and go to state 62

    $default	reduce using rule 65 (literals)

    param_list_use	go to state 63
    Equal_type	go to state 64
    inc_dec	go to state 65



state 19

    literals  ->  T_LITCHAR .   (rule 69)

    $default	reduce using rule 69 (literals)



state 20

    literals  ->  T_LSTRING .   (rule 70)

    $default	reduce using rule 70 (literals)



state 21

    expression  ->  call_method . T_SEMICOLON   (rule 30)

    T_SEMICOLON	shift, and go to state 66



state 22

    expression  ->  func_declaration .   (rule 25)

    $default	reduce using rule 25 (expression)



state 23

    expression  ->  func_use . T_SEMICOLON   (rule 26)

    T_SEMICOLON	shift, and go to state 67



state 24

    prog  ->  block .   (rule 2)

    $default	reduce using rule 2 (prog)



state 25

    prog  ->  expressions_list .   (rule 1)

    $default	reduce using rule 1 (prog)



state 26

    expression  ->  return_somehting . T_SEMICOLON   (rule 29)

    T_SEMICOLON	shift, and go to state 68



state 27

    expressions_list  ->  expression .   (rule 16)
    expressions_list  ->  expression . expressions_list   (rule 17)

    T_bool	shift, and go to state 1
    T_class	shift, and go to state 2
    T_double	shift, and go to state 3
    T_float	shift, and go to state 4
    T_for	shift, and go to state 5
    T_if	shift, and go to state 6
    T_int	shift, and go to state 7
    T_null	shift, and go to state 8
    T_return	shift, and go to state 9
    T_void	shift, and go to state 10
    T_while	shift, and go to state 11
    NUM 	shift, and go to state 12
    T_dec	shift, and go to state 13
    T_minus	shift, and go to state 14
    T_inc	shift, and go to state 15
    DEC 	shift, and go to state 17
    ID  	shift, and go to state 18
    T_LITCHAR	shift, and go to state 19
    T_LSTRING	shift, and go to state 20

    $default	reduce using rule 16 (expressions_list)

    call_method	go to state 21
    func_declaration	go to state 22
    func_use	go to state 23
    expressions_list	go to state 69
    return_somehting	go to state 26
    expression	go to state 27
    assign_expression	go to state 28
    if_expression	go to state 29
    init_if	go to state 30
    while_expression	go to state 31
    for_expression	go to state 32
    condition	go to state 33
    type_assign_expression	go to state 34
    operation_expression	go to state 35
    literals	go to state 36
    declaration_expression	go to state 37
    existing_assign_expression	go to state 38
    type	go to state 39
    inc_dec_declaration	go to state 40
    inc_dec	go to state 41
    class_declaration	go to state 42



state 28

    expression  ->  assign_expression . T_SEMICOLON   (rule 21)

    T_SEMICOLON	shift, and go to state 70



state 29

    expression  ->  if_expression .   (rule 24)

    $default	reduce using rule 24 (expression)



state 30

    if_expression  ->  init_if .   (rule 35)
    if_expression  ->  init_if . else_expression   (rule 36)

    T_else	shift, and go to state 71

    $default	reduce using rule 35 (if_expression)

    else_expression	go to state 72



state 31

    expression  ->  while_expression .   (rule 23)

    $default	reduce using rule 23 (expression)



state 32

    expression  ->  for_expression .   (rule 27)

    $default	reduce using rule 27 (expression)



state 33

    declaration_expression  ->  condition .   (rule 73)

    $default	reduce using rule 73 (declaration_expression)



state 34

    assign_expression  ->  type_assign_expression .   (rule 31)

    $default	reduce using rule 31 (assign_expression)



state 35

    condition  ->  operation_expression . T_GR operation_expression   (rule 52)
    condition  ->  operation_expression . T_LT operation_expression   (rule 53)
    condition  ->  operation_expression . T_isEqual operation_expression   (rule 54)
    condition  ->  operation_expression . T_land operation_expression   (rule 55)
    condition  ->  operation_expression . T_lor operation_expression   (rule 56)

    T_land	shift, and go to state 73
    T_lor	shift, and go to state 74
    T_GR	shift, and go to state 75
    T_isEqual	shift, and go to state 76
    T_LT	shift, and go to state 77



state 36

    operation_expression  ->  literals . T_plus operation_expression   (rule 58)
    operation_expression  ->  literals . T_minus operation_expression   (rule 59)
    operation_expression  ->  literals . T_multiply operation_expression   (rule 60)
    operation_expression  ->  literals . T_bslash operation_expression   (rule 61)
    operation_expression  ->  literals .   (rule 62)

    T_bslash	shift, and go to state 78
    T_minus	shift, and go to state 79
    T_plus	shift, and go to state 80
    T_multiply	shift, and go to state 81

    $default	reduce using rule 62 (operation_expression)



state 37

    assign_expression  ->  declaration_expression .   (rule 32)

    $default	reduce using rule 32 (assign_expression)



state 38

    assign_expression  ->  existing_assign_expression .   (rule 33)

    $default	reduce using rule 33 (assign_expression)



state 39

    func_declaration  ->  type . ID param_list_type block   (rule 5)
    type_assign_expression  ->  type . ID Equal_type operation_expression   (rule 57)
    declaration_expression  ->  type . ID   (rule 72)

    ID  	shift, and go to state 82



state 40

    assign_expression  ->  inc_dec_declaration .   (rule 34)

    $default	reduce using rule 34 (assign_expression)



state 41

    inc_dec_declaration  ->  inc_dec . ID   (rule 86)

    ID  	shift, and go to state 83



state 42

    expression  ->  class_declaration .   (rule 28)

    $default	reduce using rule 28 (expression)



state 43

    class_declaration  ->  T_class ID . T_OCOR attributes_func T_CCOR   (rule 89)

    T_OCOR	shift, and go to state 84



state 44

    for_expression  ->  T_for T_OPAREN . type_assign_expression T_SEMICOLON condition T_SEMICOLON existing_assign_expression T_CPAREN block   (rule 44)
    for_expression  ->  T_for T_OPAREN . existing_assign_expression T_SEMICOLON condition T_SEMICOLON existing_assign_expression T_CPAREN block   (rule 45)
    for_expression  ->  T_for T_OPAREN . type_assign_expression T_SEMICOLON condition T_SEMICOLON inc_dec_declaration T_CPAREN block   (rule 46)
    for_expression  ->  T_for T_OPAREN . existing_assign_expression T_SEMICOLON condition T_SEMICOLON inc_dec_declaration T_CPAREN block   (rule 47)
    for_expression  ->  T_for T_OPAREN . type_assign_expression T_SEMICOLON condition T_SEMICOLON existing_assign_expression T_CPAREN   (rule 48)
    for_expression  ->  T_for T_OPAREN . existing_assign_expression T_SEMICOLON condition T_SEMICOLON existing_assign_expression T_CPAREN   (rule 49)
    for_expression  ->  T_for T_OPAREN . type_assign_expression T_SEMICOLON condition T_SEMICOLON inc_dec_declaration T_CPAREN   (rule 50)
    for_expression  ->  T_for T_OPAREN . existing_assign_expression T_SEMICOLON condition T_SEMICOLON inc_dec_declaration T_CPAREN   (rule 51)

    T_bool	shift, and go to state 1
    T_double	shift, and go to state 3
    T_float	shift, and go to state 4
    T_int	shift, and go to state 7
    T_void	shift, and go to state 10
    ID  	shift, and go to state 85

    type_assign_expression	go to state 86
    existing_assign_expression	go to state 87
    type	go to state 88



state 45

    init_if  ->  T_if T_OPAREN . condition T_CPAREN block   (rule 37)
    init_if  ->  T_if T_OPAREN . ID T_CPAREN block   (rule 38)

    T_null	shift, and go to state 8
    NUM 	shift, and go to state 12
    T_minus	shift, and go to state 14
    DEC 	shift, and go to state 17
    ID  	shift, and go to state 89
    T_LITCHAR	shift, and go to state 19
    T_LSTRING	shift, and go to state 20

    condition	go to state 90
    operation_expression	go to state 35
    literals	go to state 36



state 46

    literals  ->  ID .   (rule 65)
    existing_assign_expression  ->  ID . Equal_type operation_expression   (rule 74)
    inc_dec_declaration  ->  ID . inc_dec   (rule 85)

    T_neq	shift, and go to state 55
    T_dec	shift, and go to state 13
    T_deceq	shift, and go to state 56
    T_inc	shift, and go to state 15
    T_inceq	shift, and go to state 57
    T_EQUAL	shift, and go to state 60
    T_multeq	shift, and go to state 61

    $default	reduce using rule 65 (literals)

    Equal_type	go to state 64
    inc_dec	go to state 65



state 47

    return_somehting  ->  T_return assign_expression .   (rule 19)

    $default	reduce using rule 19 (return_somehting)



state 48

    return_somehting  ->  T_return literals .   (rule 20)
    operation_expression  ->  literals . T_plus operation_expression   (rule 58)
    operation_expression  ->  literals . T_minus operation_expression   (rule 59)
    operation_expression  ->  literals . T_multiply operation_expression   (rule 60)
    operation_expression  ->  literals . T_bslash operation_expression   (rule 61)
    operation_expression  ->  literals .   (rule 62)

    T_bslash	shift, and go to state 78
    T_minus	shift, and go to state 79
    T_plus	shift, and go to state 80
    T_multiply	shift, and go to state 81

    $default	reduce using rule 62 (operation_expression)



state 49

    type_assign_expression  ->  type . ID Equal_type operation_expression   (rule 57)
    declaration_expression  ->  type . ID   (rule 72)

    ID  	shift, and go to state 91



state 50

    while_expression  ->  T_while T_OPAREN . condition T_CPAREN block   (rule 42)
    while_expression  ->  T_while T_OPAREN . condition T_CPAREN   (rule 43)

    T_null	shift, and go to state 8
    NUM 	shift, and go to state 12
    T_minus	shift, and go to state 14
    DEC 	shift, and go to state 17
    ID  	shift, and go to state 92
    T_LITCHAR	shift, and go to state 19
    T_LSTRING	shift, and go to state 20

    condition	go to state 93
    operation_expression	go to state 35
    literals	go to state 36



state 51

    literals  ->  T_minus NUM .   (rule 66)

    $default	reduce using rule 66 (literals)



state 52

    literals  ->  T_minus DEC .   (rule 67)

    $default	reduce using rule 67 (literals)



state 53

    literals  ->  T_minus ID .   (rule 68)

    $default	reduce using rule 68 (literals)



state 54

    block  ->  T_OCOR expressions_list . T_CCOR   (rule 15)

    T_CCOR	shift, and go to state 94



state 55

    Equal_type  ->  T_neq .   (rule 82)

    $default	reduce using rule 82 (Equal_type)



state 56

    Equal_type  ->  T_deceq .   (rule 81)

    $default	reduce using rule 81 (Equal_type)



state 57

    Equal_type  ->  T_inceq .   (rule 80)

    $default	reduce using rule 80 (Equal_type)



state 58

    param_list_use  ->  T_OPAREN . id_list T_CPAREN   (rule 7)
    param_list_use  ->  T_OPAREN . T_CPAREN   (rule 8)

    T_CPAREN	shift, and go to state 95
    ID  	shift, and go to state 96

    id_list	go to state 97



state 59

    expression  ->  ID T_SEMICOLON .   (rule 22)

    $default	reduce using rule 22 (expression)



state 60

    Equal_type  ->  T_EQUAL .   (rule 84)

    $default	reduce using rule 84 (Equal_type)



state 61

    Equal_type  ->  T_multeq .   (rule 83)

    $default	reduce using rule 83 (Equal_type)



state 62

    call_method  ->  ID T_dot . ID param_list_use   (rule 3)
    call_method  ->  ID T_dot . ID   (rule 4)

    ID  	shift, and go to state 98



state 63

    func_use  ->  ID param_list_use .   (rule 6)

    $default	reduce using rule 6 (func_use)



state 64

    existing_assign_expression  ->  ID Equal_type . operation_expression   (rule 74)

    T_null	shift, and go to state 8
    NUM 	shift, and go to state 12
    T_minus	shift, and go to state 14
    DEC 	shift, and go to state 17
    ID  	shift, and go to state 92
    T_LITCHAR	shift, and go to state 19
    T_LSTRING	shift, and go to state 20

    operation_expression	go to state 99
    literals	go to state 36



state 65

    inc_dec_declaration  ->  ID inc_dec .   (rule 85)

    $default	reduce using rule 85 (inc_dec_declaration)



state 66

    expression  ->  call_method T_SEMICOLON .   (rule 30)

    $default	reduce using rule 30 (expression)



state 67

    expression  ->  func_use T_SEMICOLON .   (rule 26)

    $default	reduce using rule 26 (expression)



state 68

    expression  ->  return_somehting T_SEMICOLON .   (rule 29)

    $default	reduce using rule 29 (expression)



state 69

    expressions_list  ->  expression expressions_list .   (rule 17)

    $default	reduce using rule 17 (expressions_list)



state 70

    expression  ->  assign_expression T_SEMICOLON .   (rule 21)

    $default	reduce using rule 21 (expression)



state 71

    else_expression  ->  T_else . T_if T_OPAREN condition T_CPAREN block else_expression   (rule 39)
    else_expression  ->  T_else . T_if T_OPAREN ID T_CPAREN block else_expression   (rule 40)
    else_expression  ->  T_else . block   (rule 41)

    T_if	shift, and go to state 100
    T_OCOR	shift, and go to state 16

    block	go to state 101



state 72

    if_expression  ->  init_if else_expression .   (rule 36)

    $default	reduce using rule 36 (if_expression)



state 73

    condition  ->  operation_expression T_land . operation_expression   (rule 55)

    T_null	shift, and go to state 8
    NUM 	shift, and go to state 12
    T_minus	shift, and go to state 14
    DEC 	shift, and go to state 17
    ID  	shift, and go to state 92
    T_LITCHAR	shift, and go to state 19
    T_LSTRING	shift, and go to state 20

    operation_expression	go to state 102
    literals	go to state 36



state 74

    condition  ->  operation_expression T_lor . operation_expression   (rule 56)

    T_null	shift, and go to state 8
    NUM 	shift, and go to state 12
    T_minus	shift, and go to state 14
    DEC 	shift, and go to state 17
    ID  	shift, and go to state 92
    T_LITCHAR	shift, and go to state 19
    T_LSTRING	shift, and go to state 20

    operation_expression	go to state 103
    literals	go to state 36



state 75

    condition  ->  operation_expression T_GR . operation_expression   (rule 52)

    T_null	shift, and go to state 8
    NUM 	shift, and go to state 12
    T_minus	shift, and go to state 14
    DEC 	shift, and go to state 17
    ID  	shift, and go to state 92
    T_LITCHAR	shift, and go to state 19
    T_LSTRING	shift, and go to state 20

    operation_expression	go to state 104
    literals	go to state 36



state 76

    condition  ->  operation_expression T_isEqual . operation_expression   (rule 54)

    T_null	shift, and go to state 8
    NUM 	shift, and go to state 12
    T_minus	shift, and go to state 14
    DEC 	shift, and go to state 17
    ID  	shift, and go to state 92
    T_LITCHAR	shift, and go to state 19
    T_LSTRING	shift, and go to state 20

    operation_expression	go to state 105
    literals	go to state 36



state 77

    condition  ->  operation_expression T_LT . operation_expression   (rule 53)

    T_null	shift, and go to state 8
    NUM 	shift, and go to state 12
    T_minus	shift, and go to state 14
    DEC 	shift, and go to state 17
    ID  	shift, and go to state 92
    T_LITCHAR	shift, and go to state 19
    T_LSTRING	shift, and go to state 20

    operation_expression	go to state 106
    literals	go to state 36



state 78

    operation_expression  ->  literals T_bslash . operation_expression   (rule 61)

    T_null	shift, and go to state 8
    NUM 	shift, and go to state 12
    T_minus	shift, and go to state 14
    DEC 	shift, and go to state 17
    ID  	shift, and go to state 92
    T_LITCHAR	shift, and go to state 19
    T_LSTRING	shift, and go to state 20

    operation_expression	go to state 107
    literals	go to state 36



state 79

    operation_expression  ->  literals T_minus . operation_expression   (rule 59)

    T_null	shift, and go to state 8
    NUM 	shift, and go to state 12
    T_minus	shift, and go to state 14
    DEC 	shift, and go to state 17
    ID  	shift, and go to state 92
    T_LITCHAR	shift, and go to state 19
    T_LSTRING	shift, and go to state 20

    operation_expression	go to state 108
    literals	go to state 36



state 80

    operation_expression  ->  literals T_plus . operation_expression   (rule 58)

    T_null	shift, and go to state 8
    NUM 	shift, and go to state 12
    T_minus	shift, and go to state 14
    DEC 	shift, and go to state 17
    ID  	shift, and go to state 92
    T_LITCHAR	shift, and go to state 19
    T_LSTRING	shift, and go to state 20

    operation_expression	go to state 109
    literals	go to state 36



state 81

    operation_expression  ->  literals T_multiply . operation_expression   (rule 60)

    T_null	shift, and go to state 8
    NUM 	shift, and go to state 12
    T_minus	shift, and go to state 14
    DEC 	shift, and go to state 17
    ID  	shift, and go to state 92
    T_LITCHAR	shift, and go to state 19
    T_LSTRING	shift, and go to state 20

    operation_expression	go to state 110
    literals	go to state 36



state 82

    func_declaration  ->  type ID . param_list_type block   (rule 5)
    type_assign_expression  ->  type ID . Equal_type operation_expression   (rule 57)
    declaration_expression  ->  type ID .   (rule 72)

    T_neq	shift, and go to state 55
    T_deceq	shift, and go to state 56
    T_inceq	shift, and go to state 57
    T_OPAREN	shift, and go to state 111
    T_EQUAL	shift, and go to state 60
    T_multeq	shift, and go to state 61

    $default	reduce using rule 72 (declaration_expression)

    param_list_type	go to state 112
    Equal_type	go to state 113



state 83

    inc_dec_declaration  ->  inc_dec ID .   (rule 86)

    $default	reduce using rule 86 (inc_dec_declaration)



state 84

    class_declaration  ->  T_class ID T_OCOR . attributes_func T_CCOR   (rule 89)

    T_bool	shift, and go to state 1
    T_double	shift, and go to state 3
    T_float	shift, and go to state 4
    T_int	shift, and go to state 7
    T_null	shift, and go to state 8
    T_private	shift, and go to state 114
    T_protected	shift, and go to state 115
    T_public	shift, and go to state 116
    T_void	shift, and go to state 10
    NUM 	shift, and go to state 12
    T_dec	shift, and go to state 13
    T_minus	shift, and go to state 14
    T_inc	shift, and go to state 15
    DEC 	shift, and go to state 17
    ID  	shift, and go to state 46
    T_LITCHAR	shift, and go to state 19
    T_LSTRING	shift, and go to state 20

    func_declaration	go to state 117
    assign_expression	go to state 118
    condition	go to state 33
    type_assign_expression	go to state 34
    operation_expression	go to state 35
    literals	go to state 36
    declaration_expression	go to state 37
    existing_assign_expression	go to state 38
    type	go to state 39
    inc_dec_declaration	go to state 40
    inc_dec	go to state 41
    access_mode	go to state 119
    attributes_func	go to state 120



state 85

    existing_assign_expression  ->  ID . Equal_type operation_expression   (rule 74)

    T_neq	shift, and go to state 55
    T_deceq	shift, and go to state 56
    T_inceq	shift, and go to state 57
    T_EQUAL	shift, and go to state 60
    T_multeq	shift, and go to state 61

    Equal_type	go to state 64



state 86

    for_expression  ->  T_for T_OPAREN type_assign_expression . T_SEMICOLON condition T_SEMICOLON existing_assign_expression T_CPAREN block   (rule 44)
    for_expression  ->  T_for T_OPAREN type_assign_expression . T_SEMICOLON condition T_SEMICOLON inc_dec_declaration T_CPAREN block   (rule 46)
    for_expression  ->  T_for T_OPAREN type_assign_expression . T_SEMICOLON condition T_SEMICOLON existing_assign_expression T_CPAREN   (rule 48)
    for_expression  ->  T_for T_OPAREN type_assign_expression . T_SEMICOLON condition T_SEMICOLON inc_dec_declaration T_CPAREN   (rule 50)

    T_SEMICOLON	shift, and go to state 121



state 87

    for_expression  ->  T_for T_OPAREN existing_assign_expression . T_SEMICOLON condition T_SEMICOLON existing_assign_expression T_CPAREN block   (rule 45)
    for_expression  ->  T_for T_OPAREN existing_assign_expression . T_SEMICOLON condition T_SEMICOLON inc_dec_declaration T_CPAREN block   (rule 47)
    for_expression  ->  T_for T_OPAREN existing_assign_expression . T_SEMICOLON condition T_SEMICOLON existing_assign_expression T_CPAREN   (rule 49)
    for_expression  ->  T_for T_OPAREN existing_assign_expression . T_SEMICOLON condition T_SEMICOLON inc_dec_declaration T_CPAREN   (rule 51)

    T_SEMICOLON	shift, and go to state 122



state 88

    type_assign_expression  ->  type . ID Equal_type operation_expression   (rule 57)

    ID  	shift, and go to state 123



state 89

    init_if  ->  T_if T_OPAREN ID . T_CPAREN block   (rule 38)
    literals  ->  ID .   (rule 65)

    T_CPAREN	shift, and go to state 124

    $default	reduce using rule 65 (literals)



state 90

    init_if  ->  T_if T_OPAREN condition . T_CPAREN block   (rule 37)

    T_CPAREN	shift, and go to state 125



state 91

    type_assign_expression  ->  type ID . Equal_type operation_expression   (rule 57)
    declaration_expression  ->  type ID .   (rule 72)

    T_neq	shift, and go to state 55
    T_deceq	shift, and go to state 56
    T_inceq	shift, and go to state 57
    T_EQUAL	shift, and go to state 60
    T_multeq	shift, and go to state 61

    $default	reduce using rule 72 (declaration_expression)

    Equal_type	go to state 113



state 92

    literals  ->  ID .   (rule 65)

    $default	reduce using rule 65 (literals)



state 93

    while_expression  ->  T_while T_OPAREN condition . T_CPAREN block   (rule 42)
    while_expression  ->  T_while T_OPAREN condition . T_CPAREN   (rule 43)

    T_CPAREN	shift, and go to state 126



state 94

    block  ->  T_OCOR expressions_list T_CCOR .   (rule 15)

    $default	reduce using rule 15 (block)



state 95

    param_list_use  ->  T_OPAREN T_CPAREN .   (rule 8)

    $default	reduce using rule 8 (param_list_use)



state 96

    id_list  ->  ID . T_COMA id_list   (rule 13)
    id_list  ->  ID .   (rule 14)

    T_COMA	shift, and go to state 127

    $default	reduce using rule 14 (id_list)



state 97

    param_list_use  ->  T_OPAREN id_list . T_CPAREN   (rule 7)

    T_CPAREN	shift, and go to state 128



state 98

    call_method  ->  ID T_dot ID . param_list_use   (rule 3)
    call_method  ->  ID T_dot ID .   (rule 4)

    T_OPAREN	shift, and go to state 58

    $default	reduce using rule 4 (call_method)

    param_list_use	go to state 129



state 99

    existing_assign_expression  ->  ID Equal_type operation_expression .   (rule 74)

    $default	reduce using rule 74 (existing_assign_expression)



state 100

    else_expression  ->  T_else T_if . T_OPAREN condition T_CPAREN block else_expression   (rule 39)
    else_expression  ->  T_else T_if . T_OPAREN ID T_CPAREN block else_expression   (rule 40)

    T_OPAREN	shift, and go to state 130



state 101

    else_expression  ->  T_else block .   (rule 41)

    $default	reduce using rule 41 (else_expression)



state 102

    condition  ->  operation_expression T_land operation_expression .   (rule 55)

    $default	reduce using rule 55 (condition)



state 103

    condition  ->  operation_expression T_lor operation_expression .   (rule 56)

    $default	reduce using rule 56 (condition)



state 104

    condition  ->  operation_expression T_GR operation_expression .   (rule 52)

    $default	reduce using rule 52 (condition)



state 105

    condition  ->  operation_expression T_isEqual operation_expression .   (rule 54)

    $default	reduce using rule 54 (condition)



state 106

    condition  ->  operation_expression T_LT operation_expression .   (rule 53)

    $default	reduce using rule 53 (condition)



state 107

    operation_expression  ->  literals T_bslash operation_expression .   (rule 61)

    $default	reduce using rule 61 (operation_expression)



state 108

    operation_expression  ->  literals T_minus operation_expression .   (rule 59)

    $default	reduce using rule 59 (operation_expression)



state 109

    operation_expression  ->  literals T_plus operation_expression .   (rule 58)

    $default	reduce using rule 58 (operation_expression)



state 110

    operation_expression  ->  literals T_multiply operation_expression .   (rule 60)

    $default	reduce using rule 60 (operation_expression)



state 111

    param_list_type  ->  T_OPAREN . declaration_expression_list T_CPAREN   (rule 9)
    param_list_type  ->  T_OPAREN . T_CPAREN   (rule 10)

    T_bool	shift, and go to state 1
    T_double	shift, and go to state 3
    T_float	shift, and go to state 4
    T_int	shift, and go to state 7
    T_null	shift, and go to state 8
    T_void	shift, and go to state 10
    NUM 	shift, and go to state 12
    T_minus	shift, and go to state 14
    T_CPAREN	shift, and go to state 131
    DEC 	shift, and go to state 17
    ID  	shift, and go to state 92
    T_LITCHAR	shift, and go to state 19
    T_LSTRING	shift, and go to state 20

    declaration_expression_list	go to state 132
    condition	go to state 33
    operation_expression	go to state 35
    literals	go to state 36
    declaration_expression	go to state 133
    type	go to state 134



state 112

    func_declaration  ->  type ID param_list_type . block   (rule 5)

    T_OCOR	shift, and go to state 16

    block	go to state 135



state 113

    type_assign_expression  ->  type ID Equal_type . operation_expression   (rule 57)

    T_null	shift, and go to state 8
    NUM 	shift, and go to state 12
    T_minus	shift, and go to state 14
    DEC 	shift, and go to state 17
    ID  	shift, and go to state 92
    T_LITCHAR	shift, and go to state 19
    T_LSTRING	shift, and go to state 20

    operation_expression	go to state 136
    literals	go to state 36



state 114

    access_mode  ->  T_private .   (rule 91)

    $default	reduce using rule 91 (access_mode)



state 115

    access_mode  ->  T_protected .   (rule 92)

    $default	reduce using rule 92 (access_mode)



state 116

    access_mode  ->  T_public .   (rule 90)

    $default	reduce using rule 90 (access_mode)



state 117

    attributes_func  ->  func_declaration .   (rule 93)
    attributes_func  ->  func_declaration . attributes_func   (rule 95)

    T_bool	shift, and go to state 1
    T_double	shift, and go to state 3
    T_float	shift, and go to state 4
    T_int	shift, and go to state 7
    T_null	shift, and go to state 8
    T_private	shift, and go to state 114
    T_protected	shift, and go to state 115
    T_public	shift, and go to state 116
    T_void	shift, and go to state 10
    NUM 	shift, and go to state 12
    T_dec	shift, and go to state 13
    T_minus	shift, and go to state 14
    T_inc	shift, and go to state 15
    DEC 	shift, and go to state 17
    ID  	shift, and go to state 46
    T_LITCHAR	shift, and go to state 19
    T_LSTRING	shift, and go to state 20

    $default	reduce using rule 93 (attributes_func)

    func_declaration	go to state 117
    assign_expression	go to state 118
    condition	go to state 33
    type_assign_expression	go to state 34
    operation_expression	go to state 35
    literals	go to state 36
    declaration_expression	go to state 37
    existing_assign_expression	go to state 38
    type	go to state 39
    inc_dec_declaration	go to state 40
    inc_dec	go to state 41
    access_mode	go to state 119
    attributes_func	go to state 137



state 118

    attributes_func  ->  assign_expression . T_SEMICOLON   (rule 94)
    attributes_func  ->  assign_expression . T_SEMICOLON attributes_func   (rule 96)

    T_SEMICOLON	shift, and go to state 138



state 119

    attributes_func  ->  access_mode . T_COLON attributes_func   (rule 97)

    T_COLON	shift, and go to state 139



state 120

    class_declaration  ->  T_class ID T_OCOR attributes_func . T_CCOR   (rule 89)

    T_CCOR	shift, and go to state 140



state 121

    for_expression  ->  T_for T_OPAREN type_assign_expression T_SEMICOLON . condition T_SEMICOLON existing_assign_expression T_CPAREN block   (rule 44)
    for_expression  ->  T_for T_OPAREN type_assign_expression T_SEMICOLON . condition T_SEMICOLON inc_dec_declaration T_CPAREN block   (rule 46)
    for_expression  ->  T_for T_OPAREN type_assign_expression T_SEMICOLON . condition T_SEMICOLON existing_assign_expression T_CPAREN   (rule 48)
    for_expression  ->  T_for T_OPAREN type_assign_expression T_SEMICOLON . condition T_SEMICOLON inc_dec_declaration T_CPAREN   (rule 50)

    T_null	shift, and go to state 8
    NUM 	shift, and go to state 12
    T_minus	shift, and go to state 14
    DEC 	shift, and go to state 17
    ID  	shift, and go to state 92
    T_LITCHAR	shift, and go to state 19
    T_LSTRING	shift, and go to state 20

    condition	go to state 141
    operation_expression	go to state 35
    literals	go to state 36



state 122

    for_expression  ->  T_for T_OPAREN existing_assign_expression T_SEMICOLON . condition T_SEMICOLON existing_assign_expression T_CPAREN block   (rule 45)
    for_expression  ->  T_for T_OPAREN existing_assign_expression T_SEMICOLON . condition T_SEMICOLON inc_dec_declaration T_CPAREN block   (rule 47)
    for_expression  ->  T_for T_OPAREN existing_assign_expression T_SEMICOLON . condition T_SEMICOLON existing_assign_expression T_CPAREN   (rule 49)
    for_expression  ->  T_for T_OPAREN existing_assign_expression T_SEMICOLON . condition T_SEMICOLON inc_dec_declaration T_CPAREN   (rule 51)

    T_null	shift, and go to state 8
    NUM 	shift, and go to state 12
    T_minus	shift, and go to state 14
    DEC 	shift, and go to state 17
    ID  	shift, and go to state 92
    T_LITCHAR	shift, and go to state 19
    T_LSTRING	shift, and go to state 20

    condition	go to state 142
    operation_expression	go to state 35
    literals	go to state 36



state 123

    type_assign_expression  ->  type ID . Equal_type operation_expression   (rule 57)

    T_neq	shift, and go to state 55
    T_deceq	shift, and go to state 56
    T_inceq	shift, and go to state 57
    T_EQUAL	shift, and go to state 60
    T_multeq	shift, and go to state 61

    Equal_type	go to state 113



state 124

    init_if  ->  T_if T_OPAREN ID T_CPAREN . block   (rule 38)

    T_OCOR	shift, and go to state 16

    block	go to state 143



state 125

    init_if  ->  T_if T_OPAREN condition T_CPAREN . block   (rule 37)

    T_OCOR	shift, and go to state 16

    block	go to state 144



state 126

    while_expression  ->  T_while T_OPAREN condition T_CPAREN . block   (rule 42)
    while_expression  ->  T_while T_OPAREN condition T_CPAREN .   (rule 43)

    T_OCOR	shift, and go to state 16

    $default	reduce using rule 43 (while_expression)

    block	go to state 145



state 127

    id_list  ->  ID T_COMA . id_list   (rule 13)

    ID  	shift, and go to state 96

    id_list	go to state 146



state 128

    param_list_use  ->  T_OPAREN id_list T_CPAREN .   (rule 7)

    $default	reduce using rule 7 (param_list_use)



state 129

    call_method  ->  ID T_dot ID param_list_use .   (rule 3)

    $default	reduce using rule 3 (call_method)



state 130

    else_expression  ->  T_else T_if T_OPAREN . condition T_CPAREN block else_expression   (rule 39)
    else_expression  ->  T_else T_if T_OPAREN . ID T_CPAREN block else_expression   (rule 40)

    T_null	shift, and go to state 8
    NUM 	shift, and go to state 12
    T_minus	shift, and go to state 14
    DEC 	shift, and go to state 17
    ID  	shift, and go to state 147
    T_LITCHAR	shift, and go to state 19
    T_LSTRING	shift, and go to state 20

    condition	go to state 148
    operation_expression	go to state 35
    literals	go to state 36



state 131

    param_list_type  ->  T_OPAREN T_CPAREN .   (rule 10)

    $default	reduce using rule 10 (param_list_type)



state 132

    param_list_type  ->  T_OPAREN declaration_expression_list . T_CPAREN   (rule 9)

    T_CPAREN	shift, and go to state 149



state 133

    declaration_expression_list  ->  declaration_expression . T_COMA declaration_expression_list   (rule 11)
    declaration_expression_list  ->  declaration_expression .   (rule 12)

    T_COMA	shift, and go to state 150

    $default	reduce using rule 12 (declaration_expression_list)



state 134

    declaration_expression  ->  type . ID   (rule 72)

    ID  	shift, and go to state 151



state 135

    func_declaration  ->  type ID param_list_type block .   (rule 5)

    $default	reduce using rule 5 (func_declaration)



state 136

    type_assign_expression  ->  type ID Equal_type operation_expression .   (rule 57)

    $default	reduce using rule 57 (type_assign_expression)



state 137

    attributes_func  ->  func_declaration attributes_func .   (rule 95)

    $default	reduce using rule 95 (attributes_func)



state 138

    attributes_func  ->  assign_expression T_SEMICOLON .   (rule 94)
    attributes_func  ->  assign_expression T_SEMICOLON . attributes_func   (rule 96)

    T_bool	shift, and go to state 1
    T_double	shift, and go to state 3
    T_float	shift, and go to state 4
    T_int	shift, and go to state 7
    T_null	shift, and go to state 8
    T_private	shift, and go to state 114
    T_protected	shift, and go to state 115
    T_public	shift, and go to state 116
    T_void	shift, and go to state 10
    NUM 	shift, and go to state 12
    T_dec	shift, and go to state 13
    T_minus	shift, and go to state 14
    T_inc	shift, and go to state 15
    DEC 	shift, and go to state 17
    ID  	shift, and go to state 46
    T_LITCHAR	shift, and go to state 19
    T_LSTRING	shift, and go to state 20

    $default	reduce using rule 94 (attributes_func)

    func_declaration	go to state 117
    assign_expression	go to state 118
    condition	go to state 33
    type_assign_expression	go to state 34
    operation_expression	go to state 35
    literals	go to state 36
    declaration_expression	go to state 37
    existing_assign_expression	go to state 38
    type	go to state 39
    inc_dec_declaration	go to state 40
    inc_dec	go to state 41
    access_mode	go to state 119
    attributes_func	go to state 152



state 139

    attributes_func  ->  access_mode T_COLON . attributes_func   (rule 97)

    T_bool	shift, and go to state 1
    T_double	shift, and go to state 3
    T_float	shift, and go to state 4
    T_int	shift, and go to state 7
    T_null	shift, and go to state 8
    T_private	shift, and go to state 114
    T_protected	shift, and go to state 115
    T_public	shift, and go to state 116
    T_void	shift, and go to state 10
    NUM 	shift, and go to state 12
    T_dec	shift, and go to state 13
    T_minus	shift, and go to state 14
    T_inc	shift, and go to state 15
    DEC 	shift, and go to state 17
    ID  	shift, and go to state 46
    T_LITCHAR	shift, and go to state 19
    T_LSTRING	shift, and go to state 20

    func_declaration	go to state 117
    assign_expression	go to state 118
    condition	go to state 33
    type_assign_expression	go to state 34
    operation_expression	go to state 35
    literals	go to state 36
    declaration_expression	go to state 37
    existing_assign_expression	go to state 38
    type	go to state 39
    inc_dec_declaration	go to state 40
    inc_dec	go to state 41
    access_mode	go to state 119
    attributes_func	go to state 153



state 140

    class_declaration  ->  T_class ID T_OCOR attributes_func T_CCOR .   (rule 89)

    $default	reduce using rule 89 (class_declaration)



state 141

    for_expression  ->  T_for T_OPAREN type_assign_expression T_SEMICOLON condition . T_SEMICOLON existing_assign_expression T_CPAREN block   (rule 44)
    for_expression  ->  T_for T_OPAREN type_assign_expression T_SEMICOLON condition . T_SEMICOLON inc_dec_declaration T_CPAREN block   (rule 46)
    for_expression  ->  T_for T_OPAREN type_assign_expression T_SEMICOLON condition . T_SEMICOLON existing_assign_expression T_CPAREN   (rule 48)
    for_expression  ->  T_for T_OPAREN type_assign_expression T_SEMICOLON condition . T_SEMICOLON inc_dec_declaration T_CPAREN   (rule 50)

    T_SEMICOLON	shift, and go to state 154



state 142

    for_expression  ->  T_for T_OPAREN existing_assign_expression T_SEMICOLON condition . T_SEMICOLON existing_assign_expression T_CPAREN block   (rule 45)
    for_expression  ->  T_for T_OPAREN existing_assign_expression T_SEMICOLON condition . T_SEMICOLON inc_dec_declaration T_CPAREN block   (rule 47)
    for_expression  ->  T_for T_OPAREN existing_assign_expression T_SEMICOLON condition . T_SEMICOLON existing_assign_expression T_CPAREN   (rule 49)
    for_expression  ->  T_for T_OPAREN existing_assign_expression T_SEMICOLON condition . T_SEMICOLON inc_dec_declaration T_CPAREN   (rule 51)

    T_SEMICOLON	shift, and go to state 155



state 143

    init_if  ->  T_if T_OPAREN ID T_CPAREN block .   (rule 38)

    $default	reduce using rule 38 (init_if)



state 144

    init_if  ->  T_if T_OPAREN condition T_CPAREN block .   (rule 37)

    $default	reduce using rule 37 (init_if)



state 145

    while_expression  ->  T_while T_OPAREN condition T_CPAREN block .   (rule 42)

    $default	reduce using rule 42 (while_expression)



state 146

    id_list  ->  ID T_COMA id_list .   (rule 13)

    $default	reduce using rule 13 (id_list)



state 147

    else_expression  ->  T_else T_if T_OPAREN ID . T_CPAREN block else_expression   (rule 40)
    literals  ->  ID .   (rule 65)

    T_CPAREN	shift, and go to state 156

    $default	reduce using rule 65 (literals)



state 148

    else_expression  ->  T_else T_if T_OPAREN condition . T_CPAREN block else_expression   (rule 39)

    T_CPAREN	shift, and go to state 157



state 149

    param_list_type  ->  T_OPAREN declaration_expression_list T_CPAREN .   (rule 9)

    $default	reduce using rule 9 (param_list_type)



state 150

    declaration_expression_list  ->  declaration_expression T_COMA . declaration_expression_list   (rule 11)

    T_bool	shift, and go to state 1
    T_double	shift, and go to state 3
    T_float	shift, and go to state 4
    T_int	shift, and go to state 7
    T_null	shift, and go to state 8
    T_void	shift, and go to state 10
    NUM 	shift, and go to state 12
    T_minus	shift, and go to state 14
    DEC 	shift, and go to state 17
    ID  	shift, and go to state 92
    T_LITCHAR	shift, and go to state 19
    T_LSTRING	shift, and go to state 20

    declaration_expression_list	go to state 158
    condition	go to state 33
    operation_expression	go to state 35
    literals	go to state 36
    declaration_expression	go to state 133
    type	go to state 134



state 151

    declaration_expression  ->  type ID .   (rule 72)

    $default	reduce using rule 72 (declaration_expression)



state 152

    attributes_func  ->  assign_expression T_SEMICOLON attributes_func .   (rule 96)

    $default	reduce using rule 96 (attributes_func)



state 153

    attributes_func  ->  access_mode T_COLON attributes_func .   (rule 97)

    $default	reduce using rule 97 (attributes_func)



state 154

    for_expression  ->  T_for T_OPAREN type_assign_expression T_SEMICOLON condition T_SEMICOLON . existing_assign_expression T_CPAREN block   (rule 44)
    for_expression  ->  T_for T_OPAREN type_assign_expression T_SEMICOLON condition T_SEMICOLON . inc_dec_declaration T_CPAREN block   (rule 46)
    for_expression  ->  T_for T_OPAREN type_assign_expression T_SEMICOLON condition T_SEMICOLON . existing_assign_expression T_CPAREN   (rule 48)
    for_expression  ->  T_for T_OPAREN type_assign_expression T_SEMICOLON condition T_SEMICOLON . inc_dec_declaration T_CPAREN   (rule 50)

    T_dec	shift, and go to state 13
    T_inc	shift, and go to state 15
    ID  	shift, and go to state 159

    existing_assign_expression	go to state 160
    inc_dec_declaration	go to state 161
    inc_dec	go to state 41



state 155

    for_expression  ->  T_for T_OPAREN existing_assign_expression T_SEMICOLON condition T_SEMICOLON . existing_assign_expression T_CPAREN block   (rule 45)
    for_expression  ->  T_for T_OPAREN existing_assign_expression T_SEMICOLON condition T_SEMICOLON . inc_dec_declaration T_CPAREN block   (rule 47)
    for_expression  ->  T_for T_OPAREN existing_assign_expression T_SEMICOLON condition T_SEMICOLON . existing_assign_expression T_CPAREN   (rule 49)
    for_expression  ->  T_for T_OPAREN existing_assign_expression T_SEMICOLON condition T_SEMICOLON . inc_dec_declaration T_CPAREN   (rule 51)

    T_dec	shift, and go to state 13
    T_inc	shift, and go to state 15
    ID  	shift, and go to state 159

    existing_assign_expression	go to state 162
    inc_dec_declaration	go to state 163
    inc_dec	go to state 41



state 156

    else_expression  ->  T_else T_if T_OPAREN ID T_CPAREN . block else_expression   (rule 40)

    T_OCOR	shift, and go to state 16

    block	go to state 164



state 157

    else_expression  ->  T_else T_if T_OPAREN condition T_CPAREN . block else_expression   (rule 39)

    T_OCOR	shift, and go to state 16

    block	go to state 165



state 158

    declaration_expression_list  ->  declaration_expression T_COMA declaration_expression_list .   (rule 11)

    $default	reduce using rule 11 (declaration_expression_list)



state 159

    existing_assign_expression  ->  ID . Equal_type operation_expression   (rule 74)
    inc_dec_declaration  ->  ID . inc_dec   (rule 85)

    T_neq	shift, and go to state 55
    T_dec	shift, and go to state 13
    T_deceq	shift, and go to state 56
    T_inc	shift, and go to state 15
    T_inceq	shift, and go to state 57
    T_EQUAL	shift, and go to state 60
    T_multeq	shift, and go to state 61

    Equal_type	go to state 64
    inc_dec	go to state 65



state 160

    for_expression  ->  T_for T_OPAREN type_assign_expression T_SEMICOLON condition T_SEMICOLON existing_assign_expression . T_CPAREN block   (rule 44)
    for_expression  ->  T_for T_OPAREN type_assign_expression T_SEMICOLON condition T_SEMICOLON existing_assign_expression . T_CPAREN   (rule 48)

    T_CPAREN	shift, and go to state 166



state 161

    for_expression  ->  T_for T_OPAREN type_assign_expression T_SEMICOLON condition T_SEMICOLON inc_dec_declaration . T_CPAREN block   (rule 46)
    for_expression  ->  T_for T_OPAREN type_assign_expression T_SEMICOLON condition T_SEMICOLON inc_dec_declaration . T_CPAREN   (rule 50)

    T_CPAREN	shift, and go to state 167



state 162

    for_expression  ->  T_for T_OPAREN existing_assign_expression T_SEMICOLON condition T_SEMICOLON existing_assign_expression . T_CPAREN block   (rule 45)
    for_expression  ->  T_for T_OPAREN existing_assign_expression T_SEMICOLON condition T_SEMICOLON existing_assign_expression . T_CPAREN   (rule 49)

    T_CPAREN	shift, and go to state 168



state 163

    for_expression  ->  T_for T_OPAREN existing_assign_expression T_SEMICOLON condition T_SEMICOLON inc_dec_declaration . T_CPAREN block   (rule 47)
    for_expression  ->  T_for T_OPAREN existing_assign_expression T_SEMICOLON condition T_SEMICOLON inc_dec_declaration . T_CPAREN   (rule 51)

    T_CPAREN	shift, and go to state 169



state 164

    else_expression  ->  T_else T_if T_OPAREN ID T_CPAREN block . else_expression   (rule 40)

    T_else	shift, and go to state 71

    else_expression	go to state 170



state 165

    else_expression  ->  T_else T_if T_OPAREN condition T_CPAREN block . else_expression   (rule 39)

    T_else	shift, and go to state 71

    else_expression	go to state 171



state 166

    for_expression  ->  T_for T_OPAREN type_assign_expression T_SEMICOLON condition T_SEMICOLON existing_assign_expression T_CPAREN . block   (rule 44)
    for_expression  ->  T_for T_OPAREN type_assign_expression T_SEMICOLON condition T_SEMICOLON existing_assign_expression T_CPAREN .   (rule 48)

    T_OCOR	shift, and go to state 16

    $default	reduce using rule 48 (for_expression)

    block	go to state 172



state 167

    for_expression  ->  T_for T_OPAREN type_assign_expression T_SEMICOLON condition T_SEMICOLON inc_dec_declaration T_CPAREN . block   (rule 46)
    for_expression  ->  T_for T_OPAREN type_assign_expression T_SEMICOLON condition T_SEMICOLON inc_dec_declaration T_CPAREN .   (rule 50)

    T_OCOR	shift, and go to state 16

    $default	reduce using rule 50 (for_expression)

    block	go to state 173



state 168

    for_expression  ->  T_for T_OPAREN existing_assign_expression T_SEMICOLON condition T_SEMICOLON existing_assign_expression T_CPAREN . block   (rule 45)
    for_expression  ->  T_for T_OPAREN existing_assign_expression T_SEMICOLON condition T_SEMICOLON existing_assign_expression T_CPAREN .   (rule 49)

    T_OCOR	shift, and go to state 16

    $default	reduce using rule 49 (for_expression)

    block	go to state 174



state 169

    for_expression  ->  T_for T_OPAREN existing_assign_expression T_SEMICOLON condition T_SEMICOLON inc_dec_declaration T_CPAREN . block   (rule 47)
    for_expression  ->  T_for T_OPAREN existing_assign_expression T_SEMICOLON condition T_SEMICOLON inc_dec_declaration T_CPAREN .   (rule 51)

    T_OCOR	shift, and go to state 16

    $default	reduce using rule 51 (for_expression)

    block	go to state 175



state 170

    else_expression  ->  T_else T_if T_OPAREN ID T_CPAREN block else_expression .   (rule 40)

    $default	reduce using rule 40 (else_expression)



state 171

    else_expression  ->  T_else T_if T_OPAREN condition T_CPAREN block else_expression .   (rule 39)

    $default	reduce using rule 39 (else_expression)



state 172

    for_expression  ->  T_for T_OPAREN type_assign_expression T_SEMICOLON condition T_SEMICOLON existing_assign_expression T_CPAREN block .   (rule 44)

    $default	reduce using rule 44 (for_expression)



state 173

    for_expression  ->  T_for T_OPAREN type_assign_expression T_SEMICOLON condition T_SEMICOLON inc_dec_declaration T_CPAREN block .   (rule 46)

    $default	reduce using rule 46 (for_expression)



state 174

    for_expression  ->  T_for T_OPAREN existing_assign_expression T_SEMICOLON condition T_SEMICOLON existing_assign_expression T_CPAREN block .   (rule 45)

    $default	reduce using rule 45 (for_expression)



state 175

    for_expression  ->  T_for T_OPAREN existing_assign_expression T_SEMICOLON condition T_SEMICOLON inc_dec_declaration T_CPAREN block .   (rule 47)

    $default	reduce using rule 47 (for_expression)



state 176

    $   	go to state 177



state 177

    $   	go to state 178



state 178

    $default	accept
